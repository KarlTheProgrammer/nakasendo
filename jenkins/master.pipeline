/*
   The master pipeline aim to build for every change on the main repository. It can build on any branch that is specified in the jenkins job configuration
   The build is normally kicked off by bitbucket push to the repository. User can also manually kickoff the build by 'Build Now'
   User can also clone the jenkins pipeline job, modify the configuration so it can build on their repository, their branch
*/

// Define a common groovy's tool holder
def jTools

pipeline {
  agent any
  options { disableConcurrentBuilds() }

  // Set the build trigger filter using Bitbucket Push And Pull Request Plugin on Created/Updated. To make it work, it need to be 'build now' manually for a first time
  triggers {
    bitBucketTrigger([
      [$class: 'BitBucketPPRRepositoryTriggerFilter' , actionFilter: [$class: 'BitBucketPPRRepositoryPushActionFilter', allowedBranches: '', triggerAlsoIfTagPush: false]]
      /*,[$class: 'BitBucketPPRPullRequestTriggerFilter', actionFilter: [$class: 'BitBucketPPRPullRequestMergedActionFilter']]*/
    ])
  }

  stages {
    // Setting common environment variables for the whole pipeline -----------------------------------------------------------------------
    stage('MASTER ENV'){
      agent any
      steps {
        echo 'master echo'
        script {
          jTools = load("${env.WORKSPACE}/jenkins/jTools.groovy")

          def main_env_file = "${env.WORKSPACE}/jenkins/master_env.groovy"
          jTools.dump_env_main_repo(main_env_file)
          jENV = load(main_env_file)
          sh "cat ${main_env_file} ; printenv"
        }
      }

      post { always { deleteDir() } }
    }

    // TODO :
    //   make build paralelle (remove disableConcurrentBuilds from top of this file)
    //   migrate the pipeline pull-request

    // Build on Windows -----------------------------------------------------------------------------------------------------------
    stage('Window Build'){
      agent { label 'slave_vm_win10pro_x64_mvsc2017' }
      options { skipDefaultCheckout true }

      steps {
        step([$class: 'WsCleanup'])
        checkout scm
        script {
            def windows_env_file = "${env.WORKSPACE}\\jenkins\\windows_env.groovy"
            jTools.dump_buildenv_windows(windows_env_file)
            jWINDOWS_ENV = load(windows_env_file)
            bat "type ${windows_env_file} && set"

            // Update bitbucket build status (in process)
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              bat "python %WINDOWS_CHAINKINS_FILE% --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.jTARGET_REPO_HTTP} --target_commit=${env.jTARGET_COMMIT} --jenkins_status=NOT_BUILT"
            }

            jTools.build_on_windows()
            jTools.runtest_on_windows()
            jTools.pack_on_windows()
        }
      }

      post {
        always {
          script{

            jTools.consolidate_test_on_windows()

            junit "${env.jPOSTBUILD_DIRNAME}/*junit*.xml"

            emailext ( // TODO send html msg to slack sdk channel
              to: "${env.jEMAIL_TO_SEND}",
              subject: "${currentBuild.result} - ${env.JENKINS_SLAVE_OS} [${env.jTARGET_COMMIT_SHORT}] on ${env.GIT_BRANCH}",
              body: '${FILE,path="buildpost/email.html"}' // TODO : use generic env instead of hardcoded buildpost
            )

            // Update bitbucket build status
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              bat "python %WINDOWS_CHAINKINS_FILE% --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.jTARGET_REPO_HTTP} --target_commit=${env.jTARGET_COMMIT} --jenkins_status=${currentBuild.result}"
            }

          }
        }
      }
    }


    // Build on Linux ---------------------------------------------------------------------------------------------------------------
    stage('Linux Build'){
      agent { label 'slave_vm_Ubuntu18_x64_gcc730'}
      options { skipDefaultCheckout true }

      steps {
        step([$class: 'WsCleanup'])
        checkout scm
        script {
            def linux_env_file = "${env.WORKSPACE}/jenkins/linux_env.groovy"
            jTools.dump_buildenv_linux(linux_env_file)
            jLINUX_ENV = load(linux_env_file)   
            sh "cat ${linux_env_file} ; printenv"

            // Update bitbucket build status (in process)
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              sh "python $LINUX_CHAINKINS_FILE --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.jTARGET_REPO_HTTP} --target_commit=${env.jTARGET_COMMIT} --jenkins_status=NOT_BUILT"
            }

            jTools.build_on_linux()
            jTools.runtest_on_linux()
            jTools.pack_on_linux()
        }
      }
      post {
        always {
          script{

            jTools.consolidate_test_on_linux()

            junit "${env.jPOSTBUILD_DIRNAME}/*junit*.xml"

            emailext ( // TODO send html msg to slack sdk channel
              to: "${env.jEMAIL_TO_SEND}",
              subject: "${currentBuild.result} - ${env.JENKINS_SLAVE_OS} [${env.jTARGET_COMMIT_SHORT}] on ${env.GIT_BRANCH}",
              body: '${FILE,path="buildpost/email.html"}' // TODO : use generic env instead of hardcoded buildpost
            )

            // Update bitbucket build status
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              sh "python $LINUX_CHAINKINS_FILE --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.jTARGET_REPO_HTTP} --target_commit=${env.jTARGET_COMMIT} --jenkins_status=${currentBuild.result}"
            }
          }
        }
      }
    }

  }
}