#!/usr/bin/env python3
import sys
import argparse
from distutils.core import setup, Extension

## Script to build Python ${PYMODULE_NAME} module
## The script has its own argument list indicating the dependencies and the source files to build the ${PYMODULE_NAME} module
## After parsing it's argument, it will reset sys.argv to pass it to the setup part of the script
##
## Usage
## python this_script.py --dependencies lib1.a lib2.a module1.a module2.a --sources PyMyModule.h PyMyModule.cpp

parser = argparse.ArgumentParser(description='Build Python ${PYMODULE_NAME} module')
parser.add_argument('--include_dirs'  , nargs='+', help='List of include directories to build Python ${PYMODULE_NAME} module')
parser.add_argument('--sys_libraries' , nargs='+', help='List of system link libraries to build Python ${PYMODULE_NAME} module')
parser.add_argument('--dependencies'  , nargs='+', help='List of link libraries to build Python ${PYMODULE_NAME} module')
parser.add_argument('--sources'       , nargs='+', help='List of source files for Python ${PYMODULE_NAME} module')
args = parser.parse_args()

print('Argument to build Python ${PYMODULE_NAME} module :')
for _incl in args.include_dirs:
    print('   + include    :' + _incl)
for _dep in args.dependencies:
    print('   + dependency :' + _dep)
for _src in args.sources:
    print('   + source     :' + _src)
if hasattr(args, "sys_libraries") and args.sys_libraries is not None :
    for _slib in args.sys_libraries:
        print('   + sys lib    :' + _slib)
else:
    print('   + sys lib    : is empty')

### Reset arguments for python setup
print('Argument to setup Python ${PYMODULE_NAME} module :')
sys.argv = [sys.argv[0]]
sys.argv.append('build')
sys.argv.append(r'--build-base=${PYMODULE_BUILD_DIR}') # NEED to be native path, populated by cmake
sys.argv.append('install')
sys.argv.append(r'--prefix=${PYMODULE_INSTALL_DIR}')   # NEED to be native path, populated by cmake
for eachArg in sys.argv:
    print('setup ${PYMODULE_NAME} : ' + eachArg)

module1 = Extension('${PYMODULE_NAME}',
                    define_macros = [('SDK_MAJOR_VERSION', '1'), ('SDK_VERSION_MINOR', '0'), ('SDK_VERSION_PATCH', '0'), ('Python_VERSION_MAJOR', '3'), ('Python_VERSION_MINOR', '7')],
                    include_dirs  = args.include_dirs,
                    libraries     = args.sys_libraries,
                    extra_objects = args.dependencies,
                    sources       = args.sources
)

setup(name = '${PYMODULE_NAME}',
      version = '${SDK_VERSION_MAJOR}.${SDK_VERSION_MINOR}.${SDK_VERSION_PATCH}',
      description = 'Python demo',
      author = 'Murphy',
      author_email = 'j.murphy@nchain.com',
      url = 'https://docs.python.org/extending/building',
      long_description = 'This is really just a demo package',
     ext_modules = [module1]
)

## https://docs.python.org/3.7/install/
## import sys
## sys.path.append('/path/to/the/PyBigNumbers')
## import PyBigNumbers
## print('import is ok')
#  AVal = "c590e57ee64fced18aff6e2f0c6ac05625b1e94f394f42470cae14d12cadea4f5ab6b9d77225fe3b4903825966c78752ae51b6a0a2caca555fd0ffcbd9704b01"
#  BVal = "219639ed8afc21e052422fff0ae5583231ebca2999404b099628093e6540b1dbc20b9c495aa7229b5965b19a5fcd653b3fa0eccab567c5b5e8"
#  ret = PyBigNumbers.addFromHex(AVal,BVal)
#  print(ret)
